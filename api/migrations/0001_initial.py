# Generated by Django 4.0.4 on 2022-04-16 14:54

import django.contrib.auth.models
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='HomePrice',
            fields=[
                ('id', models.UUIDField(default=uuid.UUID('07d1c06a-e97b-49c7-ad34-4c7ac8b998db'), editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('date_time', models.DateTimeField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=9)),
                ('bedrooms', models.FloatField()),
                ('sqft_living', models.PositiveIntegerField()),
                ('sqft_lot', models.PositiveIntegerField()),
                ('floors', models.FloatField()),
                ('waterfront', models.PositiveIntegerField()),
                ('view', models.PositiveIntegerField()),
                ('condition', models.PositiveIntegerField()),
                ('sqft_above', models.PositiveIntegerField()),
                ('sqft_basement', models.PositiveIntegerField()),
                ('yr_built', models.PositiveIntegerField()),
                ('yr_renovated', models.PositiveIntegerField()),
                ('street', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=100)),
                ('statezip', models.CharField(max_length=25)),
                ('country', models.CharField(max_length=10)),
            ],
            options={
                'ordering': ('-created_on',),
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.UUID('a5556acb-a883-4028-92e0-ed6b43e4c9ed'), editable=False, primary_key=True, serialize=False, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
